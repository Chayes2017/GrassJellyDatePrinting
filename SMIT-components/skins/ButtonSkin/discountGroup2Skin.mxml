<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" 
				   alpha.disabledStates="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ToggleButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		
		static private const exclusions:Array = ["labelDisplay"];
		
		/**
		 * @private
		 */    
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				shadow.radiusX = cornerRadius;
				fill.radiusX = cornerRadius;
				lowlight.radiusX = cornerRadius;
				highlight.radiusX = cornerRadius;
				border.radiusX = cornerRadius;
			}
			
			if (highlightStroke) highlightStroke.radiusX = cornerRadius;
			if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
			if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
		
		import spark.filters.*;
		import flash.filters.BitmapFilterQuality;
		import flash.filters.BitmapFilterType;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow" left="-3" right="-3" top="-3" bottom="-3" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x00aeff" 
								 color.downStates="0x00aeff"
								 alpha="1"
								 alpha.downStates="0.5" />
				<s:GradientEntry color="0x00aeff" 
								 color.downStates="0x00aeff" 
								 alpha="0.5"
								 alpha.downStates="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x008fc4" 
								 color.selectedUpStates="0x00213f"
								 color.overStates="0x0061bb" 
								 color.downStates="0x00213f" 
								 alpha="0.85" 
								 alpha.overAndSelected="1" />
				<s:GradientEntry color="0x008fc4" 
								 color.selectedUpStates="0x00213f"
								 color.over="0x008700" 
								 color.overAndSelected="0x0061bb"
								 color.downStates="0x00213f" 
								 alpha="0.85"
								 alpha.overAndSelected="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 3: fill lowlight -->
	<!--- @private -->
	<s:Rect id="lowlight" left="4" right="4" top="4" bottom="4" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x00aef0" ratio="0.0" alpha="1" color.selectedStates="0x007aa7"/>
				<s:GradientEntry color="0x00aef0" ratio="0.48" alpha="1" color.selectedStates="0x007aa7"/>
				<s:GradientEntry color="0x00aef0" ratio="0.48001" alpha="1" color.selectedStates="0x007aa7"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 4: fill highlight -->
	<!--- @private -->
	<s:Rect id="highlight" left="5" right="5" top="5" bottom="5" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x00aef0"
								 ratio="0.0"
								 alpha="0.33" 
								 color.selectedStates="0x00d8ff"
								 alpha.selectedUpStates="0.22"
								 alpha.overStates="0.22" 
								 alpha.downStates="0.12"/>
				<s:GradientEntry color="0x00aef0"
								 ratio="0.48"
								 alpha="0.33"
								 color.selectedStates="0x00d8ff"
								 alpha.selectedUpStates="0.22"
								 alpha.overStates="0.22" 
								 alpha.downStates="0.12"/>
				<s:GradientEntry color="0x00aef0"
								 color.selectedStates="0x00d8ff"
								 ratio="0.48001"
								 alpha="0" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 5: highlight stroke (all states except down) -->
	<!--- @private -->
	<s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" radiusX="2" excludeFrom="downStates">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x00e8e5" alpha.overStates="0.5" alpha.selectedUpStates="0.5" />
				<s:GradientEntry color="0x00e8e5" alpha.overStates="0.5" alpha.selectedUpStates="0.5" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 6: highlight stroke (down state only) -->
	<!--- @private -->
	<s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="2"
			includeIn="downStates, selectedUpStates, overAndSelected">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x00e8e5" alpha="0.25" ratio="0.0" />
				<s:GradientEntry color="0x00e8e5" alpha="0.25" ratio="0.001" />
				<s:GradientEntry color="0x00e8e5" alpha="0.07" ratio="0.0011" />
				<s:GradientEntry color="0x00e8e5" alpha="0.07" ratio="0.965" />
				<s:GradientEntry color="0x00e8e5" alpha="0.00" ratio="0.9651" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<!--- @private -->
	<s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2" radiusX="2"
			includeIn="downStates, selectedUpStates, overAndSelected">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x00e8e5" alpha="0.09" ratio="0.0" />
				<s:GradientEntry color="0x00e8e5" alpha="0.00" ratio="0.0001" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x00e8e5" 
								 alpha="0.5625"
								 alpha.down="0.6375"
								 alpha.selectedStates="0.6375" />
				<s:GradientEntry color="0x00e8e5" 
								 alpha="0.75" 
								 alpha.down="0.85"
								 alpha.selectedStates="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay" left="10" right="10" top="2" bottom="2" alpha="1" color="0xFFFFFF"
			 fontSize="20" horizontalCenter="0" maxDisplayedLines="1" textAlign="center"
			 verticalAlign="middle" verticalCenter="1" color.selectedStates="0xff6600"
			 >
	</s:Label>
	
	<s:filters>
		<s:GradientGlowFilter  includeIn="down"
							   distance="0" 
							   angle="0"  
							   blurX="20" 
							   blurY="20" 
							   strength="2" 
							   quality="{BitmapFilterQuality.HIGH}" 
							   type="{BitmapFilterType.OUTER}" 
							   knockout="false">
			<s:entries>
				<s:GradientEntry alpha="0" color="0x00CCFF" ratio="0" />
				<s:GradientEntry alpha="1" color="0x00CCFF" ratio="255" />
			</s:entries>
		</s:GradientGlowFilter>
	</s:filters>
	
</s:SparkButtonSkin>
